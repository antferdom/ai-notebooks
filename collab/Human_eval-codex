{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Human_eval-codex","provenance":[{"file_id":"https://github.com/2796gaurav/human-eval/blob/master/colab_human_eval_codex.ipynb","timestamp":1659718774249}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"markdown","metadata":{"id":"fLbxcauyhmtt"},"source":["# Human Eval in Google Colab\n","\n","[Original Openai github source](https://github.com/openai/human-eval)\n","\n","[Paper](https://arxiv.org/pdf/2107.03374.pdf)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"epEQJik7hr_Y"},"source":["## download code and dependency"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-XfQTi37Uzl3","outputId":"5e2ff1e2-def3-4ee7-f4af-9f0e826f4632","executionInfo":{"status":"ok","timestamp":1659718805021,"user_tz":-120,"elapsed":9451,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["!git clone https://github.com/openai/human-eval.git\n","!pip install -e human-eval"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'human-eval'...\n","remote: Enumerating objects: 29, done.\u001b[K\n","remote: Counting objects: 100% (11/11), done.\u001b[K\n","remote: Compressing objects: 100% (10/10), done.\u001b[K\n","remote: Total 29 (delta 4), reused 1 (delta 1), pack-reused 18\u001b[K\n","Unpacking objects: 100% (29/29), done.\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Obtaining file:///content/human-eval\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from human-eval==1.0) (4.64.0)\n","Collecting fire\n","  Downloading fire-0.4.0.tar.gz (87 kB)\n","\u001b[K     |████████████████████████████████| 87 kB 3.1 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from human-eval==1.0) (1.21.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from fire->human-eval==1.0) (1.15.0)\n","Requirement already satisfied: termcolor in /usr/local/lib/python3.7/dist-packages (from fire->human-eval==1.0) (1.1.0)\n","Building wheels for collected packages: fire\n","  Building wheel for fire (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for fire: filename=fire-0.4.0-py2.py3-none-any.whl size=115942 sha256=186c391a4987b0962ba3313bea905ed37976945318bdd1b55316cf8d5fa70ef8\n","  Stored in directory: /root/.cache/pip/wheels/8a/67/fb/2e8a12fa16661b9d5af1f654bd199366799740a85c64981226\n","Successfully built fire\n","Installing collected packages: fire, human-eval\n","  Running setup.py develop for human-eval\n","Successfully installed fire-0.4.0 human-eval-1.0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uu7y9jiSU01u","outputId":"8f3f9e75-01bd-46d6-8ee3-74c76a729725","executionInfo":{"status":"ok","timestamp":1659718845244,"user_tz":-120,"elapsed":1006,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["%cd human-eval/human_eval"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/human-eval/human_eval\n"]}]},{"cell_type":"code","source":["!python --version"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YuGaeHUR-p3b","executionInfo":{"status":"ok","timestamp":1659719303627,"user_tz":-120,"elapsed":570,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}},"outputId":"5aa7a165-ebd8-4e5e-8808-eb59814005fc"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Python 3.7.13\n"]}]},{"cell_type":"markdown","metadata":{"id":"eQD-qZHuhvHC"},"source":["## Import modules"]},{"cell_type":"code","metadata":{"id":"FSbhMN-VU5NS","executionInfo":{"status":"ok","timestamp":1659718848045,"user_tz":-120,"elapsed":437,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["from data import write_jsonl, read_problems"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"tN-5SmNlVDMS","executionInfo":{"status":"ok","timestamp":1659718850571,"user_tz":-120,"elapsed":7,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["problems = read_problems()\n","\n","num_samples_per_task = 200\n","generate_one_completion = {\"task_id\": \"test/0\", \n","                           \"prompt\": \"def return1():\\n\", \n","                           \"canonical_solution\": \"    return 1\", \n","                           \"test\": \"def check(candidate):\\n    assert candidate() == 1\", \n","                           \"entry_point\": \"return1\"}\n","samples = [\n","    generate_one_completion\n","    for task_id in problems\n","    for _ in range(num_samples_per_task)\n","]\n","\n","write_jsonl(\"samples.jsonl\", samples)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"Te3bLldfUdMb","colab":{"base_uri":"https://localhost:8080/"},"outputId":"b55bcaaf-685f-466f-d0d4-d4c821313017","executionInfo":{"status":"ok","timestamp":1659718862986,"user_tz":-120,"elapsed":7,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["len(problems)"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["164"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1wSW0OrPT-OV","outputId":"8637394d-f13a-473a-d1a9-08cd4a29f2c5","executionInfo":{"status":"ok","timestamp":1659718865315,"user_tz":-120,"elapsed":8,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["problems['HumanEval/1']"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'canonical_solution': \"    result = []\\n    current_string = []\\n    current_depth = 0\\n\\n    for c in paren_string:\\n        if c == '(':\\n            current_depth += 1\\n            current_string.append(c)\\n        elif c == ')':\\n            current_depth -= 1\\n            current_string.append(c)\\n\\n            if current_depth == 0:\\n                result.append(''.join(current_string))\\n                current_string.clear()\\n\\n    return result\\n\",\n"," 'entry_point': 'separate_paren_groups',\n"," 'prompt': 'from typing import List\\n\\n\\ndef separate_paren_groups(paren_string: str) -> List[str]:\\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\\n    separate those group into separate strings and return the list of those.\\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\\n    Ignore any spaces in the input string.\\n    >>> separate_paren_groups(\\'( ) (( )) (( )( ))\\')\\n    [\\'()\\', \\'(())\\', \\'(()())\\']\\n    \"\"\"\\n',\n"," 'task_id': 'HumanEval/1',\n"," 'test': \"\\n\\nMETADATA = {\\n    'author': 'jt',\\n    'dataset': 'test'\\n}\\n\\n\\ndef check(candidate):\\n    assert candidate('(()()) ((())) () ((())()())') == [\\n        '(()())', '((()))', '()', '((())()())'\\n    ]\\n    assert candidate('() (()) ((())) (((())))') == [\\n        '()', '(())', '((()))', '(((())))'\\n    ]\\n    assert candidate('(()(())((())))') == [\\n        '(()(())((())))'\\n    ]\\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\\n\"}"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"0oHWO0KGSpJs","executionInfo":{"status":"ok","timestamp":1659718868534,"user_tz":-120,"elapsed":710,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["## problems given by openai\n","\n","import json\n","with open('problems.json', 'w') as fp:\n","    json.dump(problems, fp)"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pFboHY6rhycv"},"source":["## update execution.py\n","### Note\n","**This program exists to run untrusted model-generated code. Users are strongly encouraged not to do so outside of a robust security sandbox. The execution call in execution.py is deliberately commented out to ensure users read this disclaimer before running code in a potentially unsafe manner. See the comment in execution.py for more information and instructions.**\n","\n","To continue, you need to manually update `execution.py`, specifically uncomment `exec(check_program, exec_globals)`"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZSPtSzyFVH2V","outputId":"7cae8d48-2c18-456d-f17a-eb58b0b1ce80","executionInfo":{"status":"ok","timestamp":1659718956079,"user_tz":-120,"elapsed":3974,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}}},"source":["!python evaluate_functional_correctness.py ../data/example_samples.jsonl --problem_file=../data/example_problem.jsonl"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading samples...\n","\r0it [00:00, ?it/s]\r6it [00:00, 3973.76it/s]\n","Running test suites...\n","100% 6/6 [00:03<00:00,  1.98it/s]\n","Writing results to ../data/example_samples.jsonl_results.jsonl...\n","100% 6/6 [00:00<00:00, 12264.05it/s]\n","{'pass@1': 0.4999999999999999}\n"]}]},{"cell_type":"code","source":["%cd human_eval"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hsQ4zg-E_Fn9","executionInfo":{"status":"ok","timestamp":1659719797646,"user_tz":-120,"elapsed":7,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}},"outputId":"28153eb5-7f07-4ca8-854c-67598efaeedc"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/human-eval/human_eval\n"]}]},{"cell_type":"code","source":["from human_eval.data import write_jsonl, read_problems\n","\n","problems = read_problems()\n","\n","num_samples_per_task = 200\n","samples = [\n","    dict(task_id=task_id, completion=generate_one_completion(problems[task_id][\"prompt\"]))\n","    for task_id in problems for _ in range(num_samples_per_task)\n","]\n","write_jsonl(\"samples.jsonl\", samples)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"h_MTdezQ-b0n","executionInfo":{"status":"error","timestamp":1659719801492,"user_tz":-120,"elapsed":618,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}},"outputId":"4bc65a19-e581-44cf-8a88-beff7e566e07"},"execution_count":24,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-af111f95436f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m samples = [\n\u001b[1;32m      7\u001b[0m     \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtask_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtask_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompletion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgenerate_one_completion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproblems\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtask_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"prompt\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mtask_id\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mproblems\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_samples_per_task\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m ]\n\u001b[1;32m     10\u001b[0m \u001b[0mwrite_jsonl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"samples.jsonl\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msamples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-24-af111f95436f>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      6\u001b[0m samples = [\n\u001b[1;32m      7\u001b[0m     \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtask_id\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtask_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompletion\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgenerate_one_completion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproblems\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtask_id\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"prompt\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mtask_id\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mproblems\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_samples_per_task\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m ]\n\u001b[1;32m     10\u001b[0m \u001b[0mwrite_jsonl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"samples.jsonl\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msamples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'dict' object is not callable"]}]},{"cell_type":"code","source":["!evaluate_functional_correctness samples.jsonl"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LK8ygwQS9QM4","executionInfo":{"status":"ok","timestamp":1659719810322,"user_tz":-120,"elapsed":442,"user":{"displayName":"Antonio Fdez.","userId":"07158694995347245788"}},"outputId":"a313b187-97e2-4512-820c-54eccb23b462"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Traceback (most recent call last):\n","  File \"/usr/local/bin/evaluate_functional_correctness\", line 33, in <module>\n","    sys.exit(load_entry_point('human-eval', 'console_scripts', 'evaluate_functional_correctness')())\n","  File \"/usr/local/bin/evaluate_functional_correctness\", line 25, in importlib_load_entry_point\n","    return next(matches).load()\n","  File \"/usr/local/lib/python3.7/dist-packages/importlib_metadata/__init__.py\", line 203, in load\n","    module = import_module(match.group('module'))\n","  File \"/usr/lib/python3.7/importlib/__init__.py\", line 127, in import_module\n","    return _bootstrap._gcd_import(name[level:], package, level)\n","  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\n","  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\n","  File \"<frozen importlib._bootstrap>\", line 967, in _find_and_load_unlocked\n","  File \"<frozen importlib._bootstrap>\", line 677, in _load_unlocked\n","  File \"<frozen importlib._bootstrap_external>\", line 728, in exec_module\n","  File \"<frozen importlib._bootstrap>\", line 219, in _call_with_frames_removed\n","  File \"/usr/local/lib/python3.7/dist-packages/human_eval/evaluate_functional_correctness.py\", line 28, in <module>\n","    sys.exit(main())\n","  File \"/usr/local/lib/python3.7/dist-packages/human_eval/evaluate_functional_correctness.py\", line 25, in main\n","    fire.Fire(entry_point)\n","  File \"/usr/local/lib/python3.7/dist-packages/fire/core.py\", line 141, in Fire\n","    component_trace = _Fire(component, args, parsed_flag_args, context, name)\n","  File \"/usr/local/lib/python3.7/dist-packages/fire/core.py\", line 471, in _Fire\n","    target=component.__name__)\n","  File \"/usr/local/lib/python3.7/dist-packages/fire/core.py\", line 681, in _CallAndUpdateTrace\n","    component = fn(*varargs, **kwargs)\n","  File \"/usr/local/lib/python3.7/dist-packages/human_eval/evaluate_functional_correctness.py\", line 20, in entry_point\n","    results = evaluate_functional_correctness(sample_file, k, n_workers, timeout, problem_file)\n","  File \"/usr/local/lib/python3.7/dist-packages/human_eval/evaluation.py\", line 51, in evaluate_functional_correctness\n","    problems = read_problems(problem_file)\n","  File \"/usr/local/lib/python3.7/dist-packages/human_eval/data.py\", line 12, in read_problems\n","    return {task[\"task_id\"]: task for task in stream_jsonl(evalset_file)}\n","  File \"/usr/local/lib/python3.7/dist-packages/human_eval/data.py\", line 12, in <dictcomp>\n","    return {task[\"task_id\"]: task for task in stream_jsonl(evalset_file)}\n","  File \"/usr/local/lib/python3.7/dist-packages/human_eval/data.py\", line 20, in stream_jsonl\n","    with open(filename, \"rb\") as gzfp:\n","FileNotFoundError: [Errno 2] No such file or directory: '/usr/local/lib/python3.7/dist-packages/human_eval/../data/HumanEval.jsonl.gz'\n"]}]}]}